package mdn.mdn_recipes.domain.model;

import jakarta.persistence.*;
import lombok.*;
import mdn.mdn_recipes.application.dto.recipe.RecipeRequest;
import mdn.mdn_recipes.shared.util.UUIDv7;

import java.time.*;
import java.util.*;
import java.util.stream.Collectors;

@Getter
@Entity
public class Recipe {

    @Id
    private UUID id;

    @Column(nullable = false)
    private String name;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Column(nullable = false)
    private Integer servings;

    @Column(name = "preparation_time", nullable = false)
    private LocalTime preparationTime;

    @Column(name = "image_path", columnDefinition = "TEXT", nullable = false)
    private String imagePath;

    @Column(name = "created_at")
    private final LocalDateTime createdAt = LocalDateTime.now();

    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Ingredient> ingredients;

    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Step> steps;

    // Pre-persist the ID as a UUID v7 generated by the code to ensure DB compatibility
    @PrePersist
    public void prePersist() {
        if (this.id == null)
            this.id = UUIDv7.create();
    }

    public static Recipe fromDTO(RecipeRequest request)
    {
        Recipe recipe = new Recipe();
        recipe.name = request.name();
        recipe.description = request.description();
        recipe.servings = request.servings();
        recipe.preparationTime = request.preparationTime();
        recipe.imagePath = request.imagePath();

        if (request.ingredients() != null) {
            recipe.ingredients = request.ingredients().stream()
                    .map(i -> new Ingredient(recipe, i.getName(), i.getQuantity()))
                    .collect(Collectors.toList());
        }

        if (request.steps() != null) {
            recipe.steps = request.steps().stream()
                    .map(s -> new Step(recipe, s.getDescription(), s.getStepOrder()))
                    .collect(Collectors.toList());
        }

        return recipe;
    }
}
